<?php

/**
 * @file
 * Contains ys_themes.module functions.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\FieldFilteredMarkup;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Field\FieldDefinitionInterface;

/**
 * Preprocess paragraphs to determine child paragraph heading levels.
 *
 * Implements hook_preprocess_paragraph().
 */
function ys_themes_preprocess_paragraph(&$variables) {

  $fieldHeading = 'field_heading';
  $paragraphTypes = [
    'accordion_item',
  ];

  if (in_array($variables['paragraph']->getType(), $paragraphTypes)) {
    $parentParagraph = $variables['paragraph']->getParentEntity();
    if ($parentParagraph && $parentParagraph->hasField($fieldHeading)) {
      $variables['has_outer_heading'] = $parentParagraph->get($fieldHeading)->getValue() ? TRUE : FALSE;
    }
  }
}

/**
 * Preprocess field to add style variation twig variable to child fields.
 *
 * Implements hook_preprocess_field().
 */
function ys_themes_preprocess_field(&$variables) {

  /* Key value pair of paragraph machine name and twig variable name. */
  $paragraphTypes = [
    'quick_links' => 'quick_links__variation',
  ];

  if ($variables['field_name'] == 'field_links') {
    $parentParagraph = $variables['element']['#items']->getEntity();
    foreach ($paragraphTypes as $paragraph => $twigVariable) {
      if ($parentParagraph->getType() == $paragraph) {
        $variables[$twigVariable] = $parentParagraph->get('field_style_variation')->getValue() ? $parentParagraph->get('field_style_variation')->getString() : NULL;
      }
    }
  }
}

/**
 * Provides custom key-value options for paragraph-specific styling via config.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created, if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cache-able.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function ys_themes_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $options = [];
  $config = \Drupal::config('ys_themes.component_overrides');

  foreach ($config->get() as $paragraph => $fields) {
    foreach ($fields as $fieldName => $fieldData) {
      if ($entity->bundle() === $paragraph && $definition->getName() === $fieldName) {
        foreach ($fieldData['values'] as $machineSetting => $humanName) {
          $options[$machineSetting] = FieldFilteredMarkup::create(t($humanName));
        }
      }
    }
  }

  return $options;
}

/**
 * Sets the default value for paragraph-specific styling via config.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The entity being created.
 * @param \Drupal\Core\Field\FieldDefinitionInterface $definition
 *   The field definition.
 *
 * @return array
 *   An array of default value keys with each entry keyed with the “value” key.
 *
 * @see \Drupal\Core\Field\FieldConfigBase::getDefaultValue()
 */
function ys_themes_default_value_function(ContentEntityInterface $entity, FieldDefinitionInterface $definition) {
  $config = \Drupal::config('ys_themes.component_overrides');
  foreach ($config->get() as $paragraph => $fields) {
    foreach ($fields as $fieldName => $fieldData) {
      if ($entity->bundle() === $paragraph && $definition->getName() === $fieldName) {
        $default = $fieldData['default'];
      }
    }
  }

  return [
    ['value' => $default],
  ];
}

/**
 * Implements hook_page_attachments_alter().
 */
function ys_themes_page_attachments_alter(array &$page) {
  // Add CSS custom variables to the page to pass global overrides to the theme.
  $page['#attached']['html_head'][] = [
    [
      '#tag' => 'style',
      '#value' => ys_themes_build_css_variables(),
    ],
    'yalesites_theme_settings',
  ];
}

/**
 * Build a string of CSS variables to override theme settings.
 *
 * @todo: Refactor the backend management once frontend conventions are set.
 * We will look for ways to introduce error handling and unit testing.
 *
 * @return string
 *   CSS code.
 */
function ys_themes_build_css_variables() : string {
  $settings = \Drupal::service('ys_themes.theme_settings_manager');
  $css = [];
  $css[] = ':root {';

  $actionColor = $settings->getSetting('action_color');
  $css[] = "--color-theme-action: var(--color-{$actionColor});";

  $accentColor = $settings->getSetting('accent_color');
  $css[] = "--color-theme-accent: var(--color-{$accentColor});";

  $pullQuoteColor = $settings->getSetting('pull_quote_color');
  $css[] = "--color-theme-pull-quote-accent: var(--color-{$pullQuoteColor});";

  $lineColor = $settings->getSetting('line_color');
  $css[] = "--color-theme-divider: var(--color-{$lineColor});";

  $lineThickness = $settings->getSetting('line_thickness');
  $css[] = "--thickness-theme-divider: var(--thickness-divider-{$lineThickness});";

  $css[] = '}';
  return implode(PHP_EOL, $css);
}

/**
 * Implements hook_form_alter().
 *
 * Adds a placeholder to the search form and visually hides the submit button.
 */
function ys_themes_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "views_exposed_form" && $form['#id'] == "views-exposed-form-search-page-1") {
    $form['keywords']['#attributes'] = ['placeholder' => [t("Search this site")]];
    $form['actions']['submit']['#attributes']['class'][] = "visually-hidden";
  }
}

/**
 * Implements hook_theme_suggestions_form_element_label_alter().
 *
 * Add a template to visually hide the search form label and add custom icon.
 */
function ys_themes_theme_suggestions_form_element_label_alter(array &$suggestions, array $variables, $hook) {
  if (isset($variables['element']['#id']) && strpos($variables['element']['#id'], "edit-keywords") === 0) {
    $suggestions[] = $hook . '__search_form';
  }
}

/**
 * Implements hook_metatags_alter().
 *
 * If there is a search term, change the title to reflect what was searched for.
 */
function ys_themes_metatags_alter(array &$metatags, array &$context) {
  if (\Drupal::service('path.current')->getPath() == "/search") {
    $keywords = \Drupal::request()->query->get('keywords');
    if ($keywords) {
      $metatags['title'] = t("Search for {$keywords} | [site:name]");
    }
  }
}
