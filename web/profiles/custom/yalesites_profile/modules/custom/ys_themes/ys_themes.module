<?php

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\FieldFilteredMarkup;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Field\FieldDefinitionInterface;

/**
 * Provides custom key-value options for paragraph-specific styling via config
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created, if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cache-able.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function ys_themes_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $options = [];
  $config = \Drupal::config('ys_themes.component_overrides');

  foreach ($config->get() as $paragraph => $fields) {
    foreach ($fields as $fieldName => $fieldData) {
      if ($entity->bundle() === $paragraph && $definition->getName() === $fieldName) {
        foreach ($fieldData['values'] as $machineSetting => $humanName) {
          $options[$machineSetting] = FieldFilteredMarkup::create(t($humanName));
        }
      }
    }
  }

  return $options;
}

/**
 * Sets the default value for paragraph-specific styling via config
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The entity being created.
 * @param \Drupal\Core\Field\FieldDefinitionInterface $definition
 *   The field definition.
 *
 * @return array
 *   An array of default value keys with each entry keyed with the “value” key.
 *
 * @see \Drupal\Core\Field\FieldConfigBase::getDefaultValue()
 */
function ys_themes_default_value_function(ContentEntityInterface $entity, FieldDefinitionInterface $definition) {
  $config = \Drupal::config('ys_themes.component_overrides');
  foreach ($config->get() as $paragraph => $fields) {
    foreach ($fields as $fieldName => $fieldData) {
      if ($entity->bundle() === $paragraph && $definition->getName() === $fieldName) {
        $default = $fieldData['default'];
      }
    }
  }

  return [
    ['value' => $default],
  ];
}
