<?php

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\FieldFilteredMarkup;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Field\FieldDefinitionInterface;

CONST ALLOWED_VALUES = [
    'callout' => [
      'field_style_color' => [
        'blue-yale' => 'Blue',
        'gray-700' => 'Gray',
        'beige' => 'Beige',
      ],
    ],
    'cta_banner' => [
      'field_style_color' => [
        'gray-800' => 'Dark Gray',
        'gray-700' => 'Gray',
        'gray-200' => 'Light Gray (gray-200)',
        'gray-100' => 'Light Gray (gray-100)',
        'white' => 'White',
        'blue-yale' => 'Blue',
      ],
      'field_style_position' => [
        'bottom' => 'Bottom',
        'left' => 'Left',
        'right' => 'Right',
      ],
    ],
  ];

/**
 * Provides key-value options for YaleSites style settings.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created, if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cache-able.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function ys_themes_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $options = [];

  foreach (ALLOWED_VALUES as $paragraph => $fields) {
    foreach ($fields as $fieldName => $fieldData) {
      if ($entity->bundle() === $paragraph && $definition->getName() === $fieldName) {
        foreach ($fieldData as $machineSetting => $humanName) {
          $options[$machineSetting] = FieldFilteredMarkup::create(t($humanName));
        }
      }
    }
  }

  return $options;
}

/**
 * Sets the default value for the alignment field.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The entity being created.
 * @param \Drupal\Core\Field\FieldDefinitionInterface $definition
 *   The field definition.
 *
 * @return array
 *   An array of default value keys with each entry keyed with the “value” key.
 *
 * @see \Drupal\Core\Field\FieldConfigBase::getDefaultValue()
 */
function ys_themes_default_value_function(ContentEntityInterface $entity, FieldDefinitionInterface $definition) {
  foreach (ALLOWED_VALUES as $paragraph => $fields) {
    if ($entity->bundle() === $paragraph && $definition->getName() === $fieldName) {

    }
  }


  $default = 'blue-yale';
  // // Article nodes should default to center alignment.
  // if ($entity->bundle() == 'article') {
  //   $default = 'center';
  // }

  return [
    ['value' => $default],
  ];
}
